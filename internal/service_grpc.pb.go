// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: service.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserService_Register_FullMethodName   = "/transfer.UserService/Register"
	UserService_Login_FullMethodName      = "/transfer.UserService/Login"
	UserService_CheckToken_FullMethodName = "/transfer.UserService/CheckToken"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Register(ctx context.Context, in *Account, opts ...grpc.CallOption) (*RegisterStatus, error)
	Login(ctx context.Context, in *Account, opts ...grpc.CallOption) (*LoginStatus, error)
	CheckToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*CheckStatus, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Register(ctx context.Context, in *Account, opts ...grpc.CallOption) (*RegisterStatus, error) {
	out := new(RegisterStatus)
	err := c.cc.Invoke(ctx, UserService_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *Account, opts ...grpc.CallOption) (*LoginStatus, error) {
	out := new(LoginStatus)
	err := c.cc.Invoke(ctx, UserService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*CheckStatus, error) {
	out := new(CheckStatus)
	err := c.cc.Invoke(ctx, UserService_CheckToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	Register(context.Context, *Account) (*RegisterStatus, error)
	Login(context.Context, *Account) (*LoginStatus, error)
	CheckToken(context.Context, *Token) (*CheckStatus, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) Register(context.Context, *Account) (*RegisterStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *Account) (*LoginStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) CheckToken(context.Context, *Token) (*CheckStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Register(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _UserService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _UserService_CheckToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

const (
	DBService_AddUser_FullMethodName           = "/transfer.DBService/AddUser"
	DBService_GetUser_FullMethodName           = "/transfer.DBService/GetUser"
	DBService_CheckUserExist_FullMethodName    = "/transfer.DBService/CheckUserExist"
	DBService_AddFile_FullMethodName           = "/transfer.DBService/AddFile"
	DBService_GetFileByChecksum_FullMethodName = "/transfer.DBService/GetFileByChecksum"
	DBService_GetFileByUserID_FullMethodName   = "/transfer.DBService/GetFileByUserID"
	DBService_UpdateFileStatus_FullMethodName  = "/transfer.DBService/UpdateFileStatus"
	DBService_DeleteFile_FullMethodName        = "/transfer.DBService/DeleteFile"
)

// DBServiceClient is the client API for DBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserStatus, error)
	GetUser(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error)
	CheckUserExist(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*OK, error)
	AddFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileStatus, error)
	GetFileByChecksum(ctx context.Context, in *Checksum, opts ...grpc.CallOption) (*File, error)
	GetFileByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Files, error)
	UpdateFileStatus(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*FileStatus, error)
	DeleteFile(ctx context.Context, in *Checksum, opts ...grpc.CallOption) (*FileStatus, error)
}

type dBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDBServiceClient(cc grpc.ClientConnInterface) DBServiceClient {
	return &dBServiceClient{cc}
}

func (c *dBServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserStatus, error) {
	out := new(UserStatus)
	err := c.cc.Invoke(ctx, DBService_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetUser(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, DBService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) CheckUserExist(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*OK, error) {
	out := new(OK)
	err := c.cc.Invoke(ctx, DBService_CheckUserExist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) AddFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileStatus, error) {
	out := new(FileStatus)
	err := c.cc.Invoke(ctx, DBService_AddFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetFileByChecksum(ctx context.Context, in *Checksum, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, DBService_GetFileByChecksum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) GetFileByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Files, error) {
	out := new(Files)
	err := c.cc.Invoke(ctx, DBService_GetFileByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) UpdateFileStatus(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*FileStatus, error) {
	out := new(FileStatus)
	err := c.cc.Invoke(ctx, DBService_UpdateFileStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBServiceClient) DeleteFile(ctx context.Context, in *Checksum, opts ...grpc.CallOption) (*FileStatus, error) {
	out := new(FileStatus)
	err := c.cc.Invoke(ctx, DBService_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServiceServer is the server API for DBService service.
// All implementations must embed UnimplementedDBServiceServer
// for forward compatibility
type DBServiceServer interface {
	AddUser(context.Context, *User) (*UserStatus, error)
	GetUser(context.Context, *UserName) (*User, error)
	CheckUserExist(context.Context, *UserName) (*OK, error)
	AddFile(context.Context, *File) (*FileStatus, error)
	GetFileByChecksum(context.Context, *Checksum) (*File, error)
	GetFileByUserID(context.Context, *UserID) (*Files, error)
	UpdateFileStatus(context.Context, *UpdateRequest) (*FileStatus, error)
	DeleteFile(context.Context, *Checksum) (*FileStatus, error)
	mustEmbedUnimplementedDBServiceServer()
}

// UnimplementedDBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDBServiceServer struct {
}

func (UnimplementedDBServiceServer) AddUser(context.Context, *User) (*UserStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedDBServiceServer) GetUser(context.Context, *UserName) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedDBServiceServer) CheckUserExist(context.Context, *UserName) (*OK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserExist not implemented")
}
func (UnimplementedDBServiceServer) AddFile(context.Context, *File) (*FileStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFile not implemented")
}
func (UnimplementedDBServiceServer) GetFileByChecksum(context.Context, *Checksum) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByChecksum not implemented")
}
func (UnimplementedDBServiceServer) GetFileByUserID(context.Context, *UserID) (*Files, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileByUserID not implemented")
}
func (UnimplementedDBServiceServer) UpdateFileStatus(context.Context, *UpdateRequest) (*FileStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFileStatus not implemented")
}
func (UnimplementedDBServiceServer) DeleteFile(context.Context, *Checksum) (*FileStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedDBServiceServer) mustEmbedUnimplementedDBServiceServer() {}

// UnsafeDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBServiceServer will
// result in compilation errors.
type UnsafeDBServiceServer interface {
	mustEmbedUnimplementedDBServiceServer()
}

func RegisterDBServiceServer(s grpc.ServiceRegistrar, srv DBServiceServer) {
	s.RegisterService(&DBService_ServiceDesc, srv)
}

func _DBService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetUser(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_CheckUserExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).CheckUserExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_CheckUserExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).CheckUserExist(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_AddFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).AddFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_AddFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).AddFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetFileByChecksum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Checksum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetFileByChecksum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetFileByChecksum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetFileByChecksum(ctx, req.(*Checksum))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_GetFileByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).GetFileByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_GetFileByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).GetFileByUserID(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_UpdateFileStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).UpdateFileStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_UpdateFileStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).UpdateFileStatus(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Checksum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DBService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServiceServer).DeleteFile(ctx, req.(*Checksum))
	}
	return interceptor(ctx, in, info, handler)
}

// DBService_ServiceDesc is the grpc.ServiceDesc for DBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.DBService",
	HandlerType: (*DBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _DBService_AddUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _DBService_GetUser_Handler,
		},
		{
			MethodName: "CheckUserExist",
			Handler:    _DBService_CheckUserExist_Handler,
		},
		{
			MethodName: "AddFile",
			Handler:    _DBService_AddFile_Handler,
		},
		{
			MethodName: "GetFileByChecksum",
			Handler:    _DBService_GetFileByChecksum_Handler,
		},
		{
			MethodName: "GetFileByUserID",
			Handler:    _DBService_GetFileByUserID_Handler,
		},
		{
			MethodName: "UpdateFileStatus",
			Handler:    _DBService_UpdateFileStatus_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _DBService_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
